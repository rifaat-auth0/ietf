<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" submissionType="IETF" docName="draft-yusef-oauth-nested-jwt-06" category="std" ipr="pre5378Trust200902" obsoletes="" updates="" xml:lang="en" sortRefs="true" symRefs="true" tocInclude="true" version="3" consensus="true">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <!-- Generated by id2xml 1.5.0 on 2020-04-06T20:09:19Z -->
	<front>
    <title abbrev="JWT Embedded Tokens">JSON Web Token (JWT) Embedded Tokens</title>
    <seriesInfo name="Internet-Draft" value="draft-yusef-oauth-nested-jwt-06"/>

    <author fullname="Rifaat Shekh-Yusef" initials="R." surname="Shekh-Yusef">
      <organization>Okta</organization>
      <address>
        <postal>
          <street>Ottawa, Ontario, Canada</street>
        </postal>
        <email>rifaat.s.ietf@gmail.com</email>
      </address>
    </author>
 
    <author fullname="Dick Hardt" initials="D." surname="Hardt">
      <organization>Hell≈ç</organization>
      <address>
        <postal>
          <street>Seattle, Washington, USA</street>
        </postal>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>

    <author fullname="Giuseppe De Marco" initials="G." surname="De Marco">
      <organization>Dipartimento per la trasformazione digitale della Presidenza del Consiglio dei Ministri</organization>
      <address>
        <postal>
          <street>Italy</street>
        </postal>
        <email>giuseppe.demarco@teamdigitale.governo.it</email>
      </address>
    </author>

    
    <date day="22" month="Sep" year="2022"/>
    <workgroup>OAuth Working Group</workgroup>
    <abstract>
      <t>
       	This specification defines a mechanism for embedding tokens or claims into a JWT token. 
	The embedded tokens or claims could be either from one source or multiple sources, associated 
	with either one subject or multiple related subjects.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor="sect-1" numbered="true" toc="default">
      <name>Introduction</name>
      	<t>
	JWT is a mechanism that is used to transfer claims between two parties across security domains. 
	There are a number of use cases that need to embed tokens or claims into another JWT token 
	associated with one or multiple subjects.
      	</t>
      	<t>
	This specification defines a mechanism for embedding tokens or claims into a JWT token. 
	The embedded tokens or claims could be either from one source or different sources, associated 
	with either one subject or multiple related subjects.
      	</t>
    	<t>
	Such a mechanism allows for a proper auditing trail that allows the Resource Server to identify who 
	accessed what resource and on behalf of whom. In some cases, this allows the service consuming 
	such a token to present some of the information contained in the nested token or claims to the 
	end user in real-time. In addition, in some cases, this allows the Resource Server to apply 
	authorization policies based on who requested the access to the resource and on behalf of whom 
	is the request.
    	</t>
	    
      <section anchor="sect-1.1" numbered="true" toc="default">
        <name>Terminology</name>
        <t>
   	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   	"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   	document are to be interpreted as described in <xref target="RFC8174" format="default"/>.</t>

        <section anchor="definitions" numbered="true" toc="default">
        <name>Definitions</name>

      <artwork name="" type="" align="left" alt=""><![CDATA[
Primary Subject - the main subject of the token.
Secondary Subject - the subject that is acting on behalf of the primary subject.
Resource Server (RS) - as defined in [RFC6749].
Authorization Server (AS)  - as defined in [RFC6749].
Issuer - is the AS that issues the token.
Token - a mechanism to transfer claims between two parties across a security domain.

      ]]></artwork>
      </section>

      </section>
	    
	    
    </section>
    <section anchor="use-cases" numbered="true" toc="default">
      <name>Use Cases</name>
      <t>
        The following are few use cases that might benefit from such a concept, that fall into two different categories:
      </t>
      <section anchor="one-issuer" numbered="true" toc="default">
        <name>One Issuer Category</name>
        <t>
   In the following cases, both JWTs are issued by the same issuer.
        </t>
        <section anchor="prim-with-sec-authority" numbered="true" toc="default">
          <name>Primary Subject with Secondary Authority Subject</name>
          <t>
   A primary subject with a related secondary subject that has authority over the primary subject, e.g. Child/Parent, Pet/Owner.
          </t>
          <t>
   The secondary user (e.g., parent) logs in to an application (e.g., pharmacy application), gets redirected 
   to the authorization server, authenticates, and asks for permission to access resources (e.g., medication) 
   for the primary subject (e.g., child). 
   The authorization server then issues a JWT with the primary subject in the enclosing JWT and the secondary 
   subject in the nested JWT.
          </t>
        </section>
        <section anchor="multiple-primary-subjects" numbered="true" toc="default">
          <name>Multiple Primary Subjects</name>
          <t>
   Two or more primary related subjects e.g. a married couple. The authorization server is setup to provide one of 
   the subjects with permissions to access the other related subject resources.
          </t>
          <t>  
   One user (e.g., wife) logs in to a application (e.g., pharmacy application), gets redirected to the authorization server, 
   authenticates, and asks for permission to access resources (e.g., medication) for the other primary subject (e.g., husband). 
   The authorization server then issues a JWT with the primary subject in the enclosing JWT and the other 
   primary subject in the nested JWT.
          </t>
        </section>
        <section anchor="delegation-of-authority" numbered="true" toc="default">
          <name>Delegation of Authority</name>
          <t>
   A primary subject delegates authority over a resource to a secondary subject who acts on behalf of the primary subject, 
   as defined in <xref target="RFC8693" format="default"/>. 
          </t>
        </section>
      </section>
      <section anchor="multiple-issuers" numbered="true" toc="default">
        <name>Multiple Issuers Category</name>
        <t>
   In the following cases, the JWTs are issued by different issuers.
        </t>
        <section anchor="stir" numbered="true" toc="default">
          <name>STIR</name>
          <t>
   <xref target="RFC8225" format="default"/> defines a PASSporT, which is a JWT, that is used to verify
   the identity of a caller in an incoming call.</t>
          <t>
   The PASSporT Extension for Diverted Calls draft <xref target="STIR" format="default"/> uses a nested
   PASSporT to deliver the details of an incoming call that get
   redirected.  An authentication service acting for a retargeting
   entity generates new PASSporT and embeds the original PASSporT inside
   the new one.  When the new target receives the nested PASSporT it
   will be able to validate the enclosing PASSporT and use the details
   of the enclosed PASSporT to identify the original target.
          </t>
          <t>
   In this case, the original JWT is issued by the calling service, and the new enclosing 
   JWT is issued by the retargeting service.
          </t>
        </section>

  <section anchor="nsm" numbered="true" toc="default">
  <name>Network Service Mesh (NSM)</name>
  <t>
   Network Service Mesh [NSM] is a mechanism that maps the concept of a
   service mesh in Kubernetes to L2/L3 payloads.
  </t>
  <t>
   NSM GRPS messages may pass through multiple intermediaries, each of
   which may transform the message.  Each intermediary is expected to
   create its own JWT token, and include a claim that contains the JWT it
   received with the message it has transformed.
  </t>
  <t>
   In this case, the original JWT is issued by the entity sending the initial message, 
   and the new enclosing JWT is issued by the intermediate entity.
  </t>
  </section>
  
  
  <section anchor="same-subject" numbered="true" toc="default">
  <name>Multiple Issuers for same Subject</name>
  <t>
     A JWT may have embedded claims from one or more separate Issuers. 
  </t>
  <t>
  An ID Token may have identity claims from independent issuers such as DOB and a professional accreditation.
  </t>
  </section>
    
  <section anchor="multiple-audiences" numbered="true" toc="default">
  <name>Multiple tokens for multiple resources</name>
  <t>
     A JWT may embeds tokens for different audiences and scopes. 
  </t>
  <t>
  An Authorization Server issues a JWT Token that contains multiple Tokens. 
  Each Token MAY have a specialized set of claims and values 
  referred to the first Subject.

  The Tokens MAY be used by the Client to directly consume 
  protected resources or obtain new Access Tokens, over different domains,
  releasing the minimum possible number 
  of information related on the main Subject and necessary for the operation. 
  </t>
  </section>

      </section>
    </section>

<section anchor="one-issuer-flow" numbered="true" toc="default">
    <name>One Issuer Flow</name>
    <t>
	In this case, one Issuer is expected to issue either multiple Tokens or multiple claim 
	payloads to a user based on either some configuration or some interaction with the involved subjects.
    </t>
    <t>
	In a typical flow in this case, the Secondary Subject initiates the interaction with the AS, 
	authenticates, and requests access to resources that belong to the Primary Subject. 
	In some cases, e.g., child/parent, husband/wife, the consent might be configured on 
	the AS, and no interactive action is required by the primary subject. In other cases, 
	e.g., employee/admin, after the Secondary Subject has authenticated and requested access 
	to the resources of the Secondary Subject, an action might be required by the Primary 
	Subject to approve the access request by the Secondary Subject. In either case, the 
	details of these interactions are out of scope of this document.
    </t>
    </section>


    <section anchor="multiple-issuers-flow" numbered="true" toc="default">
      <name>Multiple Issuers Flow</name>
    <t>
	In this case, one issuer issues a token that is then used by one client to interact with 
	a second issuer, provide the first token to the second issuer, and request a new 
	token that includes the first token as an embedded token in the new token.
    </t>
    <t>
	In a typical flow in this case, one client requests a token from one issuer with some permissions. 
	The client then sends that token to a second issuer, which validates the token, and needs to 
	transform or add additional permissions to the first token, but it cannot change the first token. 
	The authorization server then issues a new token that either transforms the initial token or adds 
	more permissions to the new token to extend the permissions in the initial token, and embeds the 
	initial token into this new token.
    </t>

    </section>


    <section anchor="one-issuer-authz-request" numbered="true" toc="default">
      <name>One Issuer Request and Response</name>

    <section anchor="authz-request" numbered="true" toc="default">
      <name>Authorization Request</name>
      <t>
        This document defines how an AS differentiates between an authorization request from a primary 
        subject and a secondary subject, using the following parameters:
      </t>

      <artwork name="" type="" align="left" alt=""><![CDATA[
primary_subject - this indicates to the AS that the user sending this request is not 
                  the primary user of this authorization request, and instead the value 
                  of this parameter is the subject of this authorization request.
      ]]></artwork>

    </section>

    <section anchor="authz-response" numbered="true" toc="default">
      <name>Authorization Response</name>
      <t>
      If an authorization code is returned, then the response is the same as a standard authorization response. 
      The authorization code will be used by the client to obtain the tokens. Otherwise, tokens will be returned 
      in this response, per the existing standard flows.
      </t>
      <t>
      Regardless of the way the token was obtained, the claims in the token will be associated with the primary_subject, 
      with the claims associated with the secondary subject being embedded in the same token.
      </t>
    </section>

    <section anchor="authz-error-response" numbered="true" toc="default">
      <name>Error Response</name>
      <t>
      If the secondary subject is not authorized to request a token on behalf of the primary subject, 
      then an error code will be returned to indicate that. In this case, the authorization server MUST 
      construct an error response, as specified in section 5.2 of RFC6749. The value of the error parameter 
      MUST be invalid_delegation error code.
      </t>
      <t>
      The authorization server MAY include additional information regarding the reasons for the error 
      using the error_description as discussed in Section 5.2 of [RFC6749].
      </t>
    </section>

    </section>


    <section anchor="mutiple-issuers-token-issuance" numbered="true" toc="default">
      <name>Multiple Issuers Request and Response</name>

    <section anchor="token-issuance-request" numbered="true" toc="default">
      <name>Token Issuance Request</name>
      <t>
        When a client receives a token, and it needs to transform or/and enhance the permissions of the token, 
        the client will send a token request to the AS, and include the received token to be embedded in the newly 
        issued token that contains the transformed token details or permissions.
      </t>
      <t>
        The Client requests a token by sending an authorization request to the authorization server‚Äôs token endpoint 
        using the extension grant mechanism defined in Section 4.5 of [RFC6749].
      </t>

      <t>
      The client makes a token request to the token endpoint with an extension grant type using the HTTP POST method. 
      </t>

      <t>
      The following parameters are included in the HTTP request entity-body using the application/x-www-form-urlencoded 
      format with a character encoding of UTF-8 as described in Appendix B of [RFC6749].
      </t>

      <artwork name="" type="" align="left" alt=""><![CDATA[
grant_type
REQUIRED. The value urn:ietf:params:oauth:grant-type:embedded-token indicates that the 
client is requesting that the authorization server embed a provided token in the newly 
issued token.

token
REQUIRED. This parameter carries the token to be embedded into the newly issued token.

      ]]></artwork>


      <t>
      The following is an example of this new token request:
      </t>

      <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token.oauth2 HTTP/1.1
Host: as.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Aembedded-token
     &token=<token>

]]></artwork>
    </section>


      <section anchor="token-issuance-response" numbered="true" toc="default">
      <name>Token Issuance Response</name>
    
      <t>
      Before issuing the requested token, the authorization server MUST ensure that the request is 
      valid and that the embedded token is coming from a trusted and approved entity
      </t>

      <t>
      In the case that the authorization server validated and approved the request, the authorization server 
      responds to the above request with the standard response from the token endpoint, as defined in section 
      5 of [RFC6749], and includes the newly issued token with the requested embedded token.
      </t>
      </section>

      <section anchor="token-issuance-error-response" numbered="true" toc="default">
      <name>Token Issuance Error</name>
    
      <t>
      If the authorization fails to validate the embedded token, then the authorization server MUST 
      construct an error response, as specified in section 5.2 of RFC6749. The value of the error 
      parameter MUST be invalid_embedded_token error code.
      </t>

      <t>
      The authorization server MAY include additional information regarding the reasons for the error using 
      the error_description as discussed in Section 5.2 of [RFC6749].
      </t>
      </section>




    </section>

    <section anchor="jwt-content" numbered="true" toc="default">
      <name>JWT Content</name>
      <t>
   The payload of the enclosing JWT is JSON object that contains the
   Claims Set of the primary subject, and one new claim that is used to 
   hold the enclosed JWT and its relation to the primary subject.</t>
      <t>
   This document defines a new claim, "rsub" (Related Subject) Claim, that is used 
   to contain the enclosed JWT and its relation to the primary subject. The "rsub" 
   contains two claims:  

      </t>
      <dl newline="true" spacing="normal" indent="3">
        <dt>rel:</dt>
        <dd>
      Defines the relationship between the enclosed JWT and the enclosing JWT. It can 
      take one of the values defined in section <xref target="token-relationship" format="default"/> </dd>
      </dl>
      <dl newline="true" spacing="normal" indent="3">
        <dt>jwt:</dt>
        <dd>
      Contains the enclosed JWT.</dd>
      </dl>
    </section>
    <section anchor="token-relationship" numbered="true" toc="default">
      <name>Token Relationship</name>
      <t>
   The following relathionship types are defined by this specification:

      </t>
      <dl newline="true" spacing="normal" indent="3">
        <dt>urn:ietf:params:oauth:subject-type:authority</dt>
        <dd>
     Indicates that the subject in the enclosed JWT has authority over the subject in the enclosing JWT. 
     </dd>
        <dt/>
        <dd>
     This URN could be used in the child/parent use case described in <xref target="prim-with-sec-authority" format="default"/>.
     </dd>
      </dl>
      <dl newline="true" spacing="normal" indent="3">
        <dt>urn:ietf:params:oauth:subject-type:primary</dt>
        <dd>
      Indicates that the subject in the enclosed JWT is related primary subject</dd>
        <dt/>
        <dd>
      This URN could be used in the married couple use case described in <xref target="multiple-primary-subjects" format="default"/>.
      </dd>
      </dl>
      <dl newline="true" spacing="normal" indent="3">
        <dt>urn:ietf:params:oauth:subject-type:actor</dt>
        <dd>
     Indicates that the subject in the enclosed JWT is acting on behalf of the primary subject</dd>
        <dt/>
        <dd>
      This URN could be used in the delegation use case described in <xref target="delegation-of-authority" format="default"/>.
      </dd>
      </dl>
      <dl newline="true" spacing="normal" indent="3">
        <dt>urn:ietf:params:oauth:subject-type:original</dt>
        <dd>
     Indicates that the subject in the enclosed JWT is the original JWT that resulted in the primary subject JWT</dd>
        <dt/>
        <dd>
      This URN could be used in all the use cases described in <xref target="multiple-issuers" format="default"/>.
      </dd>
      </dl>
    </section>
    <section anchor="example" numbered="true" toc="default">
      <name>Example</name>
      <t>
   The following example is for a multi-subject token that represents a child/parent relashionship.
   The enclosing JWT represents the primary user, the child in this case, and the enclosed token in 
   the "rsub" claim represents the secondary user, the parent in this case.
      </t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
{
  "alg": "HS256",
  "typ": "JWT",
}
{
   "sub": "1234567890",
   "name": "Alice Doe",
   "iat": 1516239022,
   "rsub": {
      "rel" : "urn:ietf:params:oauth:subject-type:authority"
      "jwt" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
   }
}
]]></artwork>
      <t>
   In this use case, both JWTs are issued by the same entity handling the authorization request.
      </t>
    </section>
    <section anchor="sect-7" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>
   The existing security considerations apply to the use cases where the JWTs are issued by the same entity.
   Allowing more than one subject to access the same account might open the door for potential abuse.
   Care must be taken to ensure that when a secondary subject is added to an account that an adequate approval process is in place.
      </t>
      <t>
   In the multiple issuers use cases, the entity handling the incoming authorization request that contains a JWT MUST validate 
   the token and ensure that it is coming from a trusted entity, before attempting to embed that JWT into a new multi-subject JWT issued 
   by the AS.
      </t>
    </section>
    <section anchor="sect-8" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>
   TODO</t>
    </section>
    <section anchor="sect-9" numbered="true" toc="default">
      <name>Acknowledgments</name>
      <t>
   TODO</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC8225" target="https://www.rfc-editor.org/info/rfc8225" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8225.xml">
          <front>
            <title>PASSporT: Personal Assertion Token</title>
            <author initials="C." surname="Wendt" fullname="C. Wendt">
              <organization/>
            </author>
            <author initials="J." surname="Peterson" fullname="J. Peterson">
              <organization/>
            </author>
            <date year="2018" month="February"/>
            <abstract>
              <t>This document defines a method for creating and validating a token that cryptographically verifies an originating identity or, more generally, a URI or telephone number representing the originator of personal communications.  The Personal Assertion Token, PASSporT, is cryptographically signed to protect the integrity of the identity of the originator and to verify the assertion of the identity information at the destination.  The cryptographic signature is defined with the intention that it can confidently verify the originating persona even when the signature is sent to the destination party over an insecure channel.  PASSporT is particularly useful for many personal-communications applications over IP networks and other multi-hop interconnection scenarios where the originating and destination parties may not have a direct trusted relationship.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8225"/>
          <seriesInfo name="DOI" value="10.17487/RFC8225"/>
        </reference>
        <reference anchor="RFC8693">
          <front>
            <title>OAuth 2.0 Token Exchange</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
         </author>
            <author fullname="A. Nadalin" initials="A." surname="Nadalin">
         </author>
            <author fullname="B. Campbell" initials="B." surname="Campbell"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="C. Mortimore" initials="C." surname="Mortimore"/>
            <date month="October" year="2018"/>
          </front>
        </reference>
        <reference anchor="STIR">
          <front>
            <title>PASSporT Extension for Diverted Calls</title>
            <author fullname="J. Peterson" initials="J." surname="Peterson">
         </author>
            <date month="October" year="2018"/>
          </front>
        </reference>
      </references>
    </references>
  </back>
</rfc>
